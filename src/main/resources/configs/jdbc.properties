 ### 数据库配置 ###

#基础配置
jdbc.driverClassName=com.mysql.jdbc.Driver

#阿里云的数据库连接
jdbc.url=jdbc:mysql://edjyun.com:3306/lzgstudy?useUnicode=true&characterEncoding=utf-8
jdbc.username=test
jdbc.password=test@wgj

#本地的数据库连接
jdbc.url2=jdbc:mysql://localhost:3306/lzgstudy?useUnicode=true&characterEncoding=utf-8
jdbc.username2=root
jdbc.password2=root

#连接池启动时创建的初始化连接数量（默认值为0）
jdbc.initialSize=5
#连接池中可同时连接的最大的连接数（默认值为8，调整为20，高峰单机器在20并发左右，自己根据应用场景定）
jdbc.maxActive=50
#连接池中最大的空闲的连接数，超过的空闲连接将被释放，如果设置为负数表示不限制（默认为8个，maxIdle不能设置太小，因为假如在高负载的情况下，连接的打开时间比关闭的时间快，会引起连接池中idle的个数 上升超过maxIdle，而造成频繁的连接销毁和创建，类似于jvm参数中的Xmx设置)
jdbc.maxIdle=50
#连接池中最小的空闲的连接数，低于这个数量会被创建新的连接（默认为0，调整为5，该参数越接近maxIdle，性能越好，因为连接的创建和销毁，都是需要消耗资源的；但是不能太大，因为在机器很空闲的时候，也会创建低于minidle个数的连接，类似于jvm参数中的Xmn设置）
jdbc.minIdle=5
#最大等待时间，当没有可用连接时，连接池等待连接释放的最大时间，超过该时间限制会抛出异常，如果设置-1表示无限等待（默认为无限，调整为60000ms，避免因线程池不够用，而导致请求被无限制挂起）
jdbc.maxWait=60000
jdbc.defaultAutoCommit=true

#sql心跳检查 
#1. 性能问题。
#目前网站的应用大部分的瓶颈还是在I/O这一块，大部分的I/O还是在数据库的这一层面上，每一个请求可能会调用10来次SQL查询，如果不走事务，一个请求会重复获取链接，如果每次获取链接,比如在testOnBorrow都进行validateObject，性能开销不是很能接受，可以假定一次SQL操作消毫0.5~1ms(一般走了网络请求基本就这数)
#2 ．成本和收益
#网站异常数据库重启，网络异常断开的频率是非常低的，一般也就在数据库升级，演习维护时才会进行，而且一般也是选在晚上，访问量相对比较低的请求，而且一般会有人员值班关注，所以异步的validateObject是可以接受，但一个前提需要确保能保证在一个合理的时间段内，数据库能完成自动重联。 
#GenericObjectPool中针对pool管理，起了一个 异步Evict的TimerTask定时线程进行控制 ( 可通过设置参数 timeBetweenEvictionRunsMillis>0), 定时对线程池中的链接进行validateObject校验，对无效的链接进行关闭后，会调用ensureMinIdle，适当建立链接保证最小的minIdle连接数
jdbc.testWhileIdle=true
#在进行borrowObject进行处理时，对拿到的connection进行validateObject校验
jdbc.testOnBorrow=false
#在进行returnObject对返回的connection进行validateObject校验，个人觉得对数据库连接池的管理意义不大
jdbc.testOnReturn=false
#代表检查的sql
jdbc.validationQuery=select 1
#设置的Evict线程的时间，单位ms，大于0才会开启evict检查线程
jdbc.validationQueryTimeout=1
#代表在执行检查时，通过statement设置，statement.setQueryTimeout(validationQueryTimeout)
jdbc.timeBetweenEvictionRunsMillis=30000
#代表每次检查链接的数量，建议设置和maxActive一样大，这样每次可以有效检查所有的链接
jdbc.numTestsPerEvictionRun=50
#bcp默认是30分，需要开启异步线程Evict，否则不生效。原理很简单，就是通过一个异步线程，每次检查connnection上一次使用的时间戳，看看是否已经超过这个timeout时间设置
minEvictableIdleTimeMillis=18000000
#主要是用于在出现链接紧张时候，会扫描一些链接未超过removeAbandonedTimeout时间还未被释放，会主动的关闭该链接
removeAbandoned=true
removeAbandonedTimeout=180
